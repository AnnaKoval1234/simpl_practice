1) В приведённом ниже коде создаются и изменяются два объекта.
Какие значения показываются в процессе выполнения кода?
Должно быть 3 ответа.

    let animal = {
        jumps: null
    };
    let rabbit = {
        __proto__: animal,
        jumps: true
    };

    alert( rabbit.jumps ); // ? (1)

    delete rabbit.jumps;

    alert( rabbit.jumps ); // ? (2)

    delete animal.jumps;

    alert( rabbit.jumps ); // ? (3)

Ответ: true, null, undefined

2) Задача состоит из двух частей.

У нас есть объекты:

    let head = {
        glasses: 1
    };

    let table = {
        pen: 3
    };

    let bed = {
        sheet: 1,
        pillow: 2
    };

    let pockets = {
        money: 2000
    };

1. С помощью свойства __proto__ задайте прототипы так, чтобы поиск 
любого свойства выполнялся по следующему пути: pockets → bed → table → head. 
Например, pockets.pen должно возвращать значение 3 (найденное в table), 
а bed.glasses – значение 1 (найденное в head).
2. Ответьте на вопрос: как быстрее получить значение glasses – через 
pockets.glasses или через head.glasses? При необходимости составьте цепочки поиска и сравните их.

Ответ: 
1. let head = {
        glasses: 1
    };

    let table = {
        pen: 3, 
        __proto__: head
    };

    let bed = {
        sheet: 1,
        pillow: 2,
        __proto__: table
    };

    let pockets = {
        money: 2000, 
        __proto__: bed
    };
2. Очевидно, glasses быстрее получить через head, так как это свойство находится в head
-- на самом деле неважно, потому что современные движки умные

3) Объект rabbit наследует от объекта animal.
Какой объект получит свойство full при вызове rabbit.eat(): animal или rabbit?

    let animal = {
        eat() {
            this.full = true;
        }
    };

    let rabbit = {
        __proto__: animal
    };

    rabbit.eat();

Ответ: rabbit
    