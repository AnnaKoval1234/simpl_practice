В коде ниже мы создаём нового кролика new Rabbit, а потом пытаемся изменить его прототип.

Сначала у нас есть такой код:

    function Rabbit() {}
    Rabbit.prototype = {
        eats: true
    };

    let rabbit = new Rabbit();

    alert( rabbit.eats ); // true

1. Добавим одну строчку (выделенную в коде ниже). Что вызов alert покажет нам сейчас?

    function Rabbit() {}
    Rabbit.prototype = {
        eats: true
    };

    let rabbit = new Rabbit();

    Rabbit.prototype = {};

    alert( rabbit.eats ); // true

2. …А если код такой (заменили одну строчку)?

    function Rabbit() {}
    Rabbit.prototype = {
        eats: true
    };

    let rabbit = new Rabbit();

    Rabbit.prototype.eats = false;

    alert( rabbit.eats ); // true -- неправильно, false

3. Или такой (заменили одну строчку)?

    function Rabbit() {}
    Rabbit.prototype = {
        eats: true
    };

    let rabbit = new Rabbit();

    delete rabbit.eats;

    alert( rabbit.eats ); // undefined -- неправильно, true

4. Или, наконец, такой:

    function Rabbit() {}
    Rabbit.prototype = {
        eats: true
    };

    let rabbit = new Rabbit();

    delete Rabbit.prototype.eats;

    alert( rabbit.eats ); // true -- неправильно, undefined

2) Представьте, что у нас имеется некий объект obj, 
созданный функцией-конструктором – мы не знаем какой именно, но 
хотелось бы создать ещё один объект такого же типа.

Можем ли мы сделать так?
let obj2 = new obj.constructor();

Приведите пример функции-конструктора для объекта obj, 
с которой такой вызов корректно сработает. И пример 
функции-конструктора, с которой такой код поведёт себя неправильно.

Ответ: да, можем, если оно не перезаписано.
Правильный пример:
function Rabbit() {}
Rabbit.prototype = {
  eats: true
};
let rabbit1 = new Rabbit();
let rabbit2 = new rabbit1.constructor();

Неправильный пример:
function Rabbit() {}
Rabbit.prototype = {};
let rabbit1 = new Rabbit();
let rabbit2 = new rabbit1.constructor();
